/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TreeNavigatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// tree-view.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE_TREE = "tree-navigator-view";
var TreeView = class extends import_obsidian.ItemView {
  constructor(leaf, toggleCallback) {
    super(leaf);
    this.toggleCallback = toggleCallback;
    this.nodes = [];
    this.selectedIndex = 0;
    this.expandedMap = /* @__PURE__ */ new Map();
  }
  getViewType() {
    return VIEW_TYPE_TREE;
  }
  getDisplayText() {
    return "Tree Navigator";
  }
  focusContainer() {
    this.containerEl.tabIndex = 0;
    this.containerEl.focus();
  }
  focusFirstItem() {
    const first = this.container.querySelector(".tree-item");
    first?.focus();
  }
  async onOpen() {
    this.container = this.containerEl.children[1];
    this.container.empty();
    await this.buildTree();
    this.render();
    this.registerDomEvent(
      this.containerEl,
      "keydown",
      (e) => {
        if (e.key === "n" && e.altKey) {
          this.toggleCallback();
          e.preventDefault();
          return;
        }
        this.onKey(e);
      }
    );
    this.containerEl.tabIndex = 0;
    this.containerEl.focus();
  }
  async buildTree() {
    this.nodes = [];
    const root = this.app.vault.getRoot();
    const walk = (folder, depth = 0, parent) => {
      const isExpanded = this.expandedMap.get(folder.path) ?? depth === 0;
      const folderNode = { file: folder, depth, expanded: isExpanded, parent };
      this.nodes.push(folderNode);
      if (isExpanded) {
        folder.children.sort((a, b) => {
          if (a instanceof import_obsidian.TFolder && b instanceof import_obsidian.TFile) return -1;
          if (a instanceof import_obsidian.TFile && b instanceof import_obsidian.TFolder) return 1;
          return a.name.localeCompare(b.name);
        }).forEach((child) => {
          if (child instanceof import_obsidian.TFolder) {
            walk(child, depth + 1, folderNode);
          } else {
            this.nodes.push({
              file: child,
              depth: depth + 1,
              expanded: false,
              parent: folderNode
            });
          }
        });
      }
    };
    root.children.sort((a, b) => {
      if (a instanceof import_obsidian.TFolder && b instanceof import_obsidian.TFile) return -1;
      if (a instanceof import_obsidian.TFile && b instanceof import_obsidian.TFolder) return 1;
      return a.name.localeCompare(b.name);
    }).forEach((child) => {
      if (child instanceof import_obsidian.TFolder) {
        walk(child, 0);
      } else {
        this.nodes.push({ file: child, depth: 0, expanded: false });
      }
    });
  }
  render() {
    this.container.empty();
    this.nodes.forEach((node, idx) => {
      const isFolder = node.file instanceof import_obsidian.TFolder;
      const wrapper = this.container.createDiv(`tree-item ${isFolder ? "folder" : "file"}`);
      node.domEl = wrapper;
      wrapper.style.paddingLeft = `${node.depth * 1}rem`;
      if (isFolder) {
        wrapper.toggleClass("expanded", node.expanded);
        wrapper.toggleClass("collapsed", !node.expanded);
        const folderEl = wrapper.createDiv("nav-folder-title");
        folderEl.createSpan({
          cls: "nav-folder-collapse-icon",
          attr: { "aria-hidden": "true" }
        });
        folderEl.createSpan({ cls: "tree-icon mod-folder" });
        folderEl.createDiv({
          cls: "nav-folder-title-content",
          text: node.file.name
        });
      } else {
        const fileEl = wrapper.createDiv("nav-file-title");
        fileEl.createSpan({ cls: "tree-icon mod-document" });
        fileEl.createDiv({
          cls: "nav-file-title-content",
          text: node.file.name
        });
      }
      if (idx === this.selectedIndex) {
        wrapper.addClass("selected-tree-item");
        wrapper.scrollIntoView({ block: "nearest" });
      }
      wrapper.onclick = () => this.selectNode(idx);
    });
  }
  onKey(e) {
    switch (e.key) {
      case "j":
      case "ArrowDown":
        this.moveCursor(1);
        break;
      case "k":
      case "ArrowUp":
        this.moveCursor(-1);
        break;
      case "l":
      case "o":
      case "Enter":
        this.collapseOrExpand();
        break;
      case "h":
        this.collapseOrExpand();
        break;
      case "a":
        this.createPrompt();
        break;
      case "d":
        this.deletePrompt();
        break;
      case "r":
        this.renamePrompt();
        break;
      case "R":
        this.refresh();
        break;
      default:
        return;
    }
    e.preventDefault();
  }
  selectNode(idx) {
    this.selectedIndex = idx;
    this.render();
  }
  moveCursor(delta) {
    const max = this.nodes.length - 1;
    this.selectedIndex = Math.max(0, Math.min(max, this.selectedIndex + delta));
    this.render();
  }
  /**
   * Collapse this folder and all of its descendant folders.
   */
  collapseRecursively(folder) {
    this.expandedMap.set(folder.path, false);
    folder.children.forEach((child) => {
      if (child instanceof import_obsidian.TFolder) {
        this.collapseRecursively(child);
      }
    });
  }
  /**
   * Toggle expand/collapse on folders (collapsing recursively)
   * or open files.
   */
  async collapseOrExpand() {
    const node = this.nodes[this.selectedIndex];
    if (node.file instanceof import_obsidian.TFolder) {
      const path = node.file.path;
      const isExpanded = this.expandedMap.get(path) ?? false;
      if (isExpanded) {
        this.collapseRecursively(node.file);
      } else {
        this.expandedMap.set(path, true);
      }
      await this.buildTree();
      this.render();
    } else {
      await this.app.workspace.openLinkText(node.file.path, "", false);
    }
  }
  async createPrompt() {
    const node = this.nodes[this.selectedIndex];
    const parentPath = node.file instanceof import_obsidian.TFolder ? node.file.path : node.file.parent?.path ?? "";
    const name = await new TextPromptModal(this.app, "New file/folder name").openAndGetValue();
    if (!name) return;
    if (name.endsWith("/")) {
      await this.app.vault.createFolder(`${parentPath}/${name.slice(0, -1)}`);
    } else {
      const fileName = name.includes(".") ? name : `${name}.md`;
      await this.app.vault.create(`${parentPath}/${fileName}`, "");
    }
    await this.refresh();
  }
  async deletePrompt() {
    const node = this.nodes[this.selectedIndex];
    const confirmed = await new ConfirmationModal(
      this.app,
      `Delete "${node.file.name}"?`
    ).openAndGetValue();
    if (!confirmed) return;
    await this.app.vault.delete(node.file);
    this.selectedIndex = Math.max(0, this.selectedIndex - 1);
    await this.refresh();
  }
  async renamePrompt() {
    const node = this.nodes[this.selectedIndex];
    const parentPath = node.file.parent?.path ?? "";
    const newName = await new TextPromptModal(
      this.app,
      "Rename to:",
      node.file.name
    ).openAndGetValue();
    if (!newName) return;
    await this.app.vault.rename(node.file, `${parentPath}/${newName}`);
    await this.refresh();
  }
  async refresh() {
    await this.buildTree();
    this.render();
  }
};
var TextPromptModal = class extends import_obsidian.Modal {
  constructor(app, title, initial = "") {
    super(app);
    this.title = title;
    this.initial = initial;
    this.result = "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    const input = contentEl.createEl("input", { type: "text" });
    input.value = this.initial;
    input.style.width = "100%";
    input.focus();
    input.onkeydown = (e) => {
      if (e.key === "Enter") {
        this.result = input.value;
        this.close();
      }
    };
    const submit = contentEl.createEl("button", { text: "OK" });
    submit.onclick = () => {
      this.result = input.value;
      this.close();
    };
  }
  openAndGetValue() {
    return new Promise((resolve) => {
      this.onClose = () => {
        super.onClose();
        resolve(this.result);
      };
      this.open();
    });
  }
};
var ConfirmationModal = class extends import_obsidian.Modal {
  constructor(app, message) {
    super(app);
    this.message = message;
    this.result = false;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.message });
    const yes = contentEl.createEl("button", { text: "Yes" });
    const no = contentEl.createEl("button", { text: "No" });
    yes.onclick = () => {
      this.result = true;
      this.close();
    };
    no.onclick = () => {
      this.result = false;
      this.close();
    };
  }
  openAndGetValue() {
    return new Promise((resolve) => {
      this.onClose = () => {
        super.onClose();
        resolve(this.result);
      };
      this.open();
    });
  }
};

// main.ts
var TreeNavigatorPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.lastLeaf = null;
  }
  onload() {
    this.registerView(
      VIEW_TYPE_TREE,
      (leaf) => new TreeView(leaf, () => this.activateView())
    );
    this.addRibbonIcon(
      "folder",
      "Tree Navigator: Toggle Tree Navigator",
      () => this.activateView()
    );
    this.addCommand({
      id: "toggle-tree-navigator",
      name: "Tree Navigator: Toggle Tree Navigator",
      hotkeys: [{ modifiers: ["Alt"], key: "n" }],
      callback: () => this.activateView()
    });
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_TREE);
  }
  async activateView() {
    const inTree = this.app.workspace.getActiveViewOfType(TreeView);
    if (inTree && this.lastLeaf) {
      this.app.workspace.setActiveLeaf(this.lastLeaf);
      return;
    }
    const mdView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (mdView) {
      const viewType = mdView.getViewType();
      const mdLeaf = this.app.workspace.getLeavesOfType(viewType).find((l) => l.view === mdView) ?? null;
      if (mdLeaf) {
        this.lastLeaf = mdLeaf;
      }
    }
    let treeLeaf;
    const existing = this.app.workspace.getLeavesOfType(VIEW_TYPE_TREE);
    if (existing.length > 0) {
      treeLeaf = existing[0];
    } else {
      const left = this.app.workspace.getLeftLeaf(false);
      treeLeaf = left !== null ? left : this.app.workspace.getLeaf("split");
    }
    await treeLeaf.setViewState({ type: VIEW_TYPE_TREE, active: true });
    this.app.workspace.revealLeaf(treeLeaf);
    const view = treeLeaf.view;
    if (view instanceof TreeView) {
      view.focusContainer();
      view.focusFirstItem();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJ0cmVlLXZpZXcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFBsdWdpbiwgV29ya3NwYWNlTGVhZiwgTWFya2Rvd25WaWV3IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBUcmVlVmlldywgVklFV19UWVBFX1RSRUUgfSBmcm9tIFwiLi90cmVlLXZpZXdcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJlZU5hdmlnYXRvclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHByaXZhdGUgbGFzdExlYWY6IFdvcmtzcGFjZUxlYWYgfCBudWxsID0gbnVsbDtcblxuICBvbmxvYWQoKSB7XG4gICAgLy8gMSkgUmVnaXN0ZXIgVHJlZVZpZXcgd2l0aCBpbmplY3RlZCB0b2dnbGUgY2FsbGJhY2tcbiAgICB0aGlzLnJlZ2lzdGVyVmlldyhcbiAgICAgIFZJRVdfVFlQRV9UUkVFLFxuICAgICAgKGxlYWYpID0+IG5ldyBUcmVlVmlldyhsZWFmLCAoKSA9PiB0aGlzLmFjdGl2YXRlVmlldygpKVxuICAgICk7XG5cbiAgICAvLyAyKSBSaWJib24gaWNvbiB0byB0b2dnbGVcbiAgICB0aGlzLmFkZFJpYmJvbkljb24oXG4gICAgICBcImZvbGRlclwiLFxuICAgICAgXCJUcmVlIE5hdmlnYXRvcjogVG9nZ2xlIFRyZWUgTmF2aWdhdG9yXCIsXG4gICAgICAoKSA9PiB0aGlzLmFjdGl2YXRlVmlldygpXG4gICAgKTtcblxuICAgIC8vIDMpIFNpbmdsZSBjb21tYW5kICsgaG90a2V5IChBbHQrTiBieSBkZWZhdWx0KVxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJ0b2dnbGUtdHJlZS1uYXZpZ2F0b3JcIixcbiAgICAgIG5hbWU6IFwiVHJlZSBOYXZpZ2F0b3I6IFRvZ2dsZSBUcmVlIE5hdmlnYXRvclwiLFxuICAgICAgaG90a2V5czogW3sgbW9kaWZpZXJzOiBbXCJBbHRcIl0sIGtleTogXCJuXCIgfV0sXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5hY3RpdmF0ZVZpZXcoKSxcbiAgICB9KTtcbiAgfVxuXG4gIG9udW5sb2FkKCkge1xuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoVklFV19UWVBFX1RSRUUpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcbiAgICAvLyBBKSBJZiBUcmVlVmlldyBpcyBhY3RpdmUsIGdvIGJhY2sgdG8gdGhlIGxhc3RMZWFmXG4gICAgY29uc3QgaW5UcmVlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoVHJlZVZpZXcpO1xuICAgIGlmIChpblRyZWUgJiYgdGhpcy5sYXN0TGVhZikge1xuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYodGhpcy5sYXN0TGVhZik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQikgSWYgZWRpdGluZyBNYXJrZG93biwgcmVjb3JkIHRoYXQgbGVhZlxuICAgIGNvbnN0IG1kVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgaWYgKG1kVmlldykge1xuICAgICAgY29uc3Qgdmlld1R5cGUgPSBtZFZpZXcuZ2V0Vmlld1R5cGUoKTtcbiAgICAgIGNvbnN0IG1kTGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZVxuICAgICAgICAuZ2V0TGVhdmVzT2ZUeXBlKHZpZXdUeXBlKVxuICAgICAgICAuZmluZCgobCkgPT4gbC52aWV3ID09PSBtZFZpZXcpID8/IG51bGw7XG4gICAgICBpZiAobWRMZWFmKSB7XG4gICAgICAgIHRoaXMubGFzdExlYWYgPSBtZExlYWY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQykgRmluZCBvciBjcmVhdGUgdGhlIFRyZWVWaWV3IGxlYWZcbiAgICBsZXQgdHJlZUxlYWY6IFdvcmtzcGFjZUxlYWY7XG4gICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9UUkVFKTtcbiAgICBpZiAoZXhpc3RpbmcubGVuZ3RoID4gMCkge1xuICAgICAgdHJlZUxlYWYgPSBleGlzdGluZ1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGVmdCA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWZ0TGVhZihmYWxzZSk7XG4gICAgICB0cmVlTGVhZiA9IGxlZnQgIT09IG51bGwgPyBsZWZ0IDogdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoXCJzcGxpdFwiKTtcbiAgICB9XG5cbiAgICAvLyBEKSBSZXZlYWwgJiBhY3RpdmF0ZSB0aGUgVHJlZVZpZXdcbiAgICBhd2FpdCB0cmVlTGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiBWSUVXX1RZUEVfVFJFRSwgYWN0aXZlOiB0cnVlIH0pO1xuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKHRyZWVMZWFmKTtcblxuICAgIC8vIEUpIEF1dG9mb2N1cyB0aGUgdHJlZSBjb250YWluZXIgKyBmaXJzdCBpdGVtXG4gICAgY29uc3QgdmlldyA9IHRyZWVMZWFmLnZpZXc7XG4gICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBUcmVlVmlldykge1xuICAgICAgdmlldy5mb2N1c0NvbnRhaW5lcigpO1xuICAgICAgdmlldy5mb2N1c0ZpcnN0SXRlbSgpO1xuICAgIH1cbiAgfVxufSIsICJpbXBvcnQge1xuICBBcHAsXG4gIEl0ZW1WaWV3LFxuICBXb3Jrc3BhY2VMZWFmLFxuICBNb2RhbCxcbiAgVEZvbGRlcixcbiAgVEZpbGUsXG4gIFRBYnN0cmFjdEZpbGUsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX1RSRUUgPSBcInRyZWUtbmF2aWdhdG9yLXZpZXdcIjtcblxuaW50ZXJmYWNlIE5vZGUge1xuICBmaWxlOiBUQWJzdHJhY3RGaWxlO1xuICBkZXB0aDogbnVtYmVyO1xuICBleHBhbmRlZDogYm9vbGVhbjtcbiAgcGFyZW50PzogTm9kZTtcbiAgZG9tRWw/OiBIVE1MRGl2RWxlbWVudDtcbn1cblxuZXhwb3J0IGNsYXNzIFRyZWVWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICBwcml2YXRlIG5vZGVzOiBOb2RlW10gPSBbXTtcbiAgcHJpdmF0ZSBzZWxlY3RlZEluZGV4ID0gMDtcbiAgcHJpdmF0ZSBjb250YWluZXIhOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBleHBhbmRlZE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHByaXZhdGUgdG9nZ2xlQ2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICBzdXBlcihsZWFmKTtcbiAgfVxuXG4gIGdldFZpZXdUeXBlKCkge1xuICAgIHJldHVybiBWSUVXX1RZUEVfVFJFRTtcbiAgfVxuXG4gIGdldERpc3BsYXlUZXh0KCkge1xuICAgIHJldHVybiBcIlRyZWUgTmF2aWdhdG9yXCI7XG4gIH1cblxuICBmb2N1c0NvbnRhaW5lcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lckVsLnRhYkluZGV4ID0gMDtcbiAgICB0aGlzLmNvbnRhaW5lckVsLmZvY3VzKCk7XG4gIH1cblxuICBmb2N1c0ZpcnN0SXRlbSgpIHtcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudHJlZS1pdGVtXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGZpcnN0Py5mb2N1cygpO1xuICB9XG5cbiAgYXN5bmMgb25PcGVuKCkge1xuICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmNvbnRhaW5lci5lbXB0eSgpO1xuXG4gICAgYXdhaXQgdGhpcy5idWlsZFRyZWUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuXG4gICAgdGhpcy5yZWdpc3RlckRvbUV2ZW50KFxuICAgICAgdGhpcy5jb250YWluZXJFbCxcbiAgICAgIFwia2V5ZG93blwiLFxuICAgICAgKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGUua2V5ID09PSBcIm5cIiAmJiBlLmFsdEtleSkge1xuICAgICAgICAgIHRoaXMudG9nZ2xlQ2FsbGJhY2soKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25LZXkoZSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuY29udGFpbmVyRWwudGFiSW5kZXggPSAwO1xuICAgIHRoaXMuY29udGFpbmVyRWwuZm9jdXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgYnVpbGRUcmVlKCkge1xuICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgICBjb25zdCByb290ID0gdGhpcy5hcHAudmF1bHQuZ2V0Um9vdCgpO1xuXG4gICAgY29uc3Qgd2FsayA9IChmb2xkZXI6IFRGb2xkZXIsIGRlcHRoID0gMCwgcGFyZW50PzogTm9kZSkgPT4ge1xuICAgICAgY29uc3QgaXNFeHBhbmRlZCA9IHRoaXMuZXhwYW5kZWRNYXAuZ2V0KGZvbGRlci5wYXRoKSA/PyBkZXB0aCA9PT0gMDtcbiAgICAgIGNvbnN0IGZvbGRlck5vZGU6IE5vZGUgPSB7IGZpbGU6IGZvbGRlciwgZGVwdGgsIGV4cGFuZGVkOiBpc0V4cGFuZGVkLCBwYXJlbnQgfTtcbiAgICAgIHRoaXMubm9kZXMucHVzaChmb2xkZXJOb2RlKTtcblxuICAgICAgaWYgKGlzRXhwYW5kZWQpIHtcbiAgICAgICAgZm9sZGVyLmNoaWxkcmVuXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgVEZvbGRlciAmJiBiIGluc3RhbmNlb2YgVEZpbGUpIHJldHVybiAtMTtcbiAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgVEZpbGUgJiYgYiBpbnN0YW5jZW9mIFRGb2xkZXIpIHJldHVybiAxO1xuICAgICAgICAgICAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgICAgICAgd2FsayhjaGlsZCwgZGVwdGggKyAxLCBmb2xkZXJOb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMubm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZmlsZTogY2hpbGQsXG4gICAgICAgICAgICAgICAgZGVwdGg6IGRlcHRoICsgMSxcbiAgICAgICAgICAgICAgICBleHBhbmRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBmb2xkZXJOb2RlLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gU3RhcnQgYnkgaXRlcmF0aW5nIG92ZXIgcm9vdCdzIGNoaWxkcmVuLCBza2lwcGluZyB0aGUgdmF1bHQtcm9vdCBlbnRyeTpcbiAgICByb290LmNoaWxkcmVuXG4gICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYSBpbnN0YW5jZW9mIFRGb2xkZXIgJiYgYiBpbnN0YW5jZW9mIFRGaWxlKSByZXR1cm4gLTE7XG4gICAgICAgIGlmIChhIGluc3RhbmNlb2YgVEZpbGUgJiYgYiBpbnN0YW5jZW9mIFRGb2xkZXIpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKTtcbiAgICAgIH0pXG4gICAgICAuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVEZvbGRlcikge1xuICAgICAgICAgIHdhbGsoY2hpbGQsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubm9kZXMucHVzaCh7IGZpbGU6IGNoaWxkLCBkZXB0aDogMCwgZXhwYW5kZWQ6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmVtcHR5KCk7XG5cbiAgICB0aGlzLm5vZGVzLmZvckVhY2goKG5vZGUsIGlkeCkgPT4ge1xuICAgICAgY29uc3QgaXNGb2xkZXIgPSBub2RlLmZpbGUgaW5zdGFuY2VvZiBURm9sZGVyO1xuICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZURpdihgdHJlZS1pdGVtICR7aXNGb2xkZXIgPyBcImZvbGRlclwiIDogXCJmaWxlXCJ9YCk7XG4gICAgICBub2RlLmRvbUVsID0gd3JhcHBlcjtcbiAgICAgIHdyYXBwZXIuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHtub2RlLmRlcHRoICogMX1yZW1gO1xuXG4gICAgICBpZiAoaXNGb2xkZXIpIHtcbiAgICAgICAgd3JhcHBlci50b2dnbGVDbGFzcyhcImV4cGFuZGVkXCIsIG5vZGUuZXhwYW5kZWQpO1xuICAgICAgICB3cmFwcGVyLnRvZ2dsZUNsYXNzKFwiY29sbGFwc2VkXCIsICFub2RlLmV4cGFuZGVkKTtcblxuICAgICAgICBjb25zdCBmb2xkZXJFbCA9IHdyYXBwZXIuY3JlYXRlRGl2KFwibmF2LWZvbGRlci10aXRsZVwiKTtcbiAgICAgICAgZm9sZGVyRWwuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgY2xzOiBcIm5hdi1mb2xkZXItY29sbGFwc2UtaWNvblwiLFxuICAgICAgICAgIGF0dHI6IHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiB9LFxuICAgICAgICB9KTtcbiAgICAgICAgZm9sZGVyRWwuY3JlYXRlU3Bhbih7IGNsczogXCJ0cmVlLWljb24gbW9kLWZvbGRlclwiIH0pO1xuICAgICAgICBmb2xkZXJFbC5jcmVhdGVEaXYoe1xuICAgICAgICAgIGNsczogXCJuYXYtZm9sZGVyLXRpdGxlLWNvbnRlbnRcIixcbiAgICAgICAgICB0ZXh0OiBub2RlLmZpbGUubmFtZSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBmaWxlRWwgPSB3cmFwcGVyLmNyZWF0ZURpdihcIm5hdi1maWxlLXRpdGxlXCIpO1xuICAgICAgICBmaWxlRWwuY3JlYXRlU3Bhbih7IGNsczogXCJ0cmVlLWljb24gbW9kLWRvY3VtZW50XCIgfSk7XG4gICAgICAgIGZpbGVFbC5jcmVhdGVEaXYoe1xuICAgICAgICAgIGNsczogXCJuYXYtZmlsZS10aXRsZS1jb250ZW50XCIsXG4gICAgICAgICAgdGV4dDogbm9kZS5maWxlLm5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWR4ID09PSB0aGlzLnNlbGVjdGVkSW5kZXgpIHtcbiAgICAgICAgd3JhcHBlci5hZGRDbGFzcyhcInNlbGVjdGVkLXRyZWUtaXRlbVwiKTtcbiAgICAgICAgd3JhcHBlci5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiBcIm5lYXJlc3RcIiB9KTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlci5vbmNsaWNrID0gKCkgPT4gdGhpcy5zZWxlY3ROb2RlKGlkeCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIG9uS2V5KGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICBjYXNlIFwialwiOlxuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICB0aGlzLm1vdmVDdXJzb3IoMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImtcIjpcbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgIHRoaXMubW92ZUN1cnNvcigtMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImxcIjpcbiAgICAgIGNhc2UgXCJvXCI6XG4gICAgICBjYXNlIFwiRW50ZXJcIjpcbiAgICAgICAgdGhpcy5jb2xsYXBzZU9yRXhwYW5kKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgdGhpcy5jb2xsYXBzZU9yRXhwYW5kKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgdGhpcy5jcmVhdGVQcm9tcHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZFwiOlxuICAgICAgICB0aGlzLmRlbGV0ZVByb21wdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJyXCI6XG4gICAgICAgIHRoaXMucmVuYW1lUHJvbXB0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlJcIjpcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBwcml2YXRlIHNlbGVjdE5vZGUoaWR4OiBudW1iZXIpIHtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpZHg7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgbW92ZUN1cnNvcihkZWx0YTogbnVtYmVyKSB7XG4gICAgY29uc3QgbWF4ID0gdGhpcy5ub2Rlcy5sZW5ndGggLSAxO1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heCwgdGhpcy5zZWxlY3RlZEluZGV4ICsgZGVsdGEpKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbGxhcHNlIHRoaXMgZm9sZGVyIGFuZCBhbGwgb2YgaXRzIGRlc2NlbmRhbnQgZm9sZGVycy5cbiAgICovXG4gIHByaXZhdGUgY29sbGFwc2VSZWN1cnNpdmVseShmb2xkZXI6IFRGb2xkZXIpIHtcbiAgICB0aGlzLmV4cGFuZGVkTWFwLnNldChmb2xkZXIucGF0aCwgZmFsc2UpO1xuICAgIGZvbGRlci5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVEZvbGRlcikge1xuICAgICAgICB0aGlzLmNvbGxhcHNlUmVjdXJzaXZlbHkoY2hpbGQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSBleHBhbmQvY29sbGFwc2Ugb24gZm9sZGVycyAoY29sbGFwc2luZyByZWN1cnNpdmVseSlcbiAgICogb3Igb3BlbiBmaWxlcy5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY29sbGFwc2VPckV4cGFuZCgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1t0aGlzLnNlbGVjdGVkSW5kZXhdO1xuXG4gICAgLy8gRm9sZGVyIFx1MjE5MiBleHBhbmQgb3IgY29sbGFwc2VcbiAgICBpZiAobm9kZS5maWxlIGluc3RhbmNlb2YgVEZvbGRlcikge1xuICAgICAgY29uc3QgcGF0aCA9IG5vZGUuZmlsZS5wYXRoO1xuICAgICAgY29uc3QgaXNFeHBhbmRlZCA9IHRoaXMuZXhwYW5kZWRNYXAuZ2V0KHBhdGgpID8/IGZhbHNlO1xuXG4gICAgICBpZiAoaXNFeHBhbmRlZCkge1xuICAgICAgICAvLyBDb2xsYXBzZSB0aGlzIGZvbGRlciBhbmQgYWxsIGRlc2NlbmRhbnRzXG4gICAgICAgIHRoaXMuY29sbGFwc2VSZWN1cnNpdmVseShub2RlLmZpbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT25seSBleHBhbmQgdGhpcyBvbmVcbiAgICAgICAgdGhpcy5leHBhbmRlZE1hcC5zZXQocGF0aCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMuYnVpbGRUcmVlKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICAvLyBGaWxlIFx1MjE5MiBvcGVuIGl0XG4gICAgZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KG5vZGUuZmlsZS5wYXRoLCBcIlwiLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVQcm9tcHQoKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZXNbdGhpcy5zZWxlY3RlZEluZGV4XTtcbiAgICBjb25zdCBwYXJlbnRQYXRoID1cbiAgICAgIG5vZGUuZmlsZSBpbnN0YW5jZW9mIFRGb2xkZXJcbiAgICAgICAgPyBub2RlLmZpbGUucGF0aFxuICAgICAgICA6IG5vZGUuZmlsZS5wYXJlbnQ/LnBhdGggPz8gXCJcIjtcblxuICAgIGNvbnN0IG5hbWUgPSBhd2FpdCBuZXcgVGV4dFByb21wdE1vZGFsKHRoaXMuYXBwLCBcIk5ldyBmaWxlL2ZvbGRlciBuYW1lXCIpXG4gICAgICAub3BlbkFuZEdldFZhbHVlKCk7XG4gICAgaWYgKCFuYW1lKSByZXR1cm47XG5cbiAgICBpZiAobmFtZS5lbmRzV2l0aChcIi9cIikpIHtcbiAgICAgIC8vIEZvbGRlclxuICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlRm9sZGVyKGAke3BhcmVudFBhdGh9LyR7bmFtZS5zbGljZSgwLCAtMSl9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZpbGU6IGVuc3VyZSBhIC5tZCBleHRlbnNpb25cbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gbmFtZS5pbmNsdWRlcyhcIi5cIilcbiAgICAgICAgPyBuYW1lXG4gICAgICAgIDogYCR7bmFtZX0ubWRgO1xuICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKGAke3BhcmVudFBhdGh9LyR7ZmlsZU5hbWV9YCwgXCJcIik7XG4gICAgfVxuICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZGVsZXRlUHJvbXB0KCkge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVzW3RoaXMuc2VsZWN0ZWRJbmRleF07XG4gICAgY29uc3QgY29uZmlybWVkID0gYXdhaXQgbmV3IENvbmZpcm1hdGlvbk1vZGFsKFxuICAgICAgdGhpcy5hcHAsXG4gICAgICBgRGVsZXRlIFwiJHtub2RlLmZpbGUubmFtZX1cIj9gXG4gICAgKS5vcGVuQW5kR2V0VmFsdWUoKTtcbiAgICBpZiAoIWNvbmZpcm1lZCkgcmV0dXJuO1xuXG4gICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuZGVsZXRlKG5vZGUuZmlsZSk7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gTWF0aC5tYXgoMCwgdGhpcy5zZWxlY3RlZEluZGV4IC0gMSk7XG4gICAgYXdhaXQgdGhpcy5yZWZyZXNoKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJlbmFtZVByb21wdCgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1t0aGlzLnNlbGVjdGVkSW5kZXhdO1xuICAgIGNvbnN0IHBhcmVudFBhdGggPSBub2RlLmZpbGUucGFyZW50Py5wYXRoID8/IFwiXCI7XG5cbiAgICBjb25zdCBuZXdOYW1lID0gYXdhaXQgbmV3IFRleHRQcm9tcHRNb2RhbChcbiAgICAgIHRoaXMuYXBwLFxuICAgICAgXCJSZW5hbWUgdG86XCIsXG4gICAgICBub2RlLmZpbGUubmFtZVxuICAgICkub3BlbkFuZEdldFZhbHVlKCk7XG4gICAgaWYgKCFuZXdOYW1lKSByZXR1cm47XG5cbiAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZW5hbWUobm9kZS5maWxlLCBgJHtwYXJlbnRQYXRofS8ke25ld05hbWV9YCk7XG4gICAgYXdhaXQgdGhpcy5yZWZyZXNoKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJlZnJlc2goKSB7XG4gICAgYXdhaXQgdGhpcy5idWlsZFRyZWUoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG59XG5cbi8qIFx1MjAxNFx1MjAxNFx1MjAxNCBTaW1wbGUgUHJvbXB0ICYgQ29uZmlybSBNb2RhbHMgXHUyMDE0XHUyMDE0XHUyMDE0ICovXG5cbmNsYXNzIFRleHRQcm9tcHRNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgcHJpdmF0ZSByZXN1bHQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcml2YXRlIHRpdGxlOiBzdHJpbmcsIHByaXZhdGUgaW5pdGlhbCA9IFwiXCIpIHtcbiAgICBzdXBlcihhcHApO1xuICB9XG5cbiAgb25PcGVuKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogdGhpcy50aXRsZSB9KTtcblxuICAgIGNvbnN0IGlucHV0ID0gY29udGVudEVsLmNyZWF0ZUVsKFwiaW5wdXRcIiwgeyB0eXBlOiBcInRleHRcIiB9KTtcbiAgICBpbnB1dC52YWx1ZSA9IHRoaXMuaW5pdGlhbDtcbiAgICBpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgIGlucHV0LmZvY3VzKCk7XG5cbiAgICBpbnB1dC5vbmtleWRvd24gPSAoZSkgPT4ge1xuICAgICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBpbnB1dC52YWx1ZTtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBzdWJtaXQgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIk9LXCIgfSk7XG4gICAgc3VibWl0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLnJlc3VsdCA9IGlucHV0LnZhbHVlO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH07XG4gIH1cblxuICBvcGVuQW5kR2V0VmFsdWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgc3VwZXIub25DbG9zZSgpO1xuICAgICAgICByZXNvbHZlKHRoaXMucmVzdWx0KTtcbiAgICAgIH07XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9KTtcbiAgfVxufVxuXG5jbGFzcyBDb25maXJtYXRpb25Nb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgcHJpdmF0ZSByZXN1bHQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHJpdmF0ZSBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihhcHApO1xuICB9XG5cbiAgb25PcGVuKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogdGhpcy5tZXNzYWdlIH0pO1xuXG4gICAgY29uc3QgeWVzID0gY29udGVudEVsLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJZZXNcIiB9KTtcbiAgICBjb25zdCBubyA9IGNvbnRlbnRFbC5jcmVhdGVFbChcImJ1dHRvblwiLCB7IHRleHQ6IFwiTm9cIiB9KTtcblxuICAgIHllcy5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZXN1bHQgPSB0cnVlO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH07XG4gICAgbm8ub25jbGljayA9ICgpID0+IHtcbiAgICAgIHRoaXMucmVzdWx0ID0gZmFsc2U7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfTtcbiAgfVxuXG4gIG9wZW5BbmRHZXRWYWx1ZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgc3VwZXIub25DbG9zZSgpO1xuICAgICAgICByZXNvbHZlKHRoaXMucmVzdWx0KTtcbiAgICAgIH07XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9KTtcbiAgfVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQSxtQkFBb0Q7OztBQ0FwRCxzQkFRTztBQUVBLElBQU0saUJBQWlCO0FBVXZCLElBQU0sV0FBTixjQUF1Qix5QkFB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QUFBO0FBQ0UsU0FBUSxXQUFpQztBQUFBO0FBQUEsRUFFekMsU0FBUztBQUVQLFNBQUs7QUFBQSxNQUNIO0FBQUEsTUFDQSxDQUFDLFNBQVMsSUFBSSxTQUFTLE1BQU0sTUFBTSxLQUFLLGFBQWEsQ0FBQztBQUFBLElBQ3hEO0FBR0EsU0FBSztBQUFBLE1BQ0g7QUFBQSxNQUNBO0FBQUEsTUFDQSxNQUFNLEtBQUssYUFBYTtBQUFBLElBQzFCO0FBR0EsU0FBSyxXQUFXO0FBQUEsTUFDZCxJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsRUFBRSxXQUFXLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDO0FBQUEsTUFDMUMsVUFBVSxNQUFNLEtBQUssYUFBYTtBQUFBLElBQ3BDLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxXQUFXO0FBQ1QsU0FBSyxJQUFJLFVBQVUsbUJBQW1CLGNBQWM7QUFBQSxFQUN0RDtBQUFBLEVBRUEsTUFBYSxlQUFlO0FBRTFCLFVBQU0sU0FBUyxLQUFLLElBQUksVUFBVSxvQkFBb0IsUUFBUTtBQUM5RCxRQUFJLFVBQVUsS0FBSyxVQUFVO0FBQzNCLFdBQUssSUFBSSxVQUFVLGNBQWMsS0FBSyxRQUFRO0FBQzlDO0FBQUEsSUFDRjtBQUdBLFVBQU0sU0FBUyxLQUFLLElBQUksVUFBVSxvQkFBb0IsNkJBQVk7QUFDbEUsUUFBSSxRQUFRO0FBQ1YsWUFBTSxXQUFXLE9BQU8sWUFBWTtBQUNwQyxZQUFNLFNBQVMsS0FBSyxJQUFJLFVBQ3JCLGdCQUFnQixRQUFRLEVBQ3hCLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxNQUFNLEtBQUs7QUFDckMsVUFBSSxRQUFRO0FBQ1YsYUFBSyxXQUFXO0FBQUEsTUFDbEI7QUFBQSxJQUNGO0FBR0EsUUFBSTtBQUNKLFVBQU0sV0FBVyxLQUFLLElBQUksVUFBVSxnQkFBZ0IsY0FBYztBQUNsRSxRQUFJLFNBQVMsU0FBUyxHQUFHO0FBQ3ZCLGlCQUFXLFNBQVMsQ0FBQztBQUFBLElBQ3ZCLE9BQU87QUFDTCxZQUFNLE9BQU8sS0FBSyxJQUFJLFVBQVUsWUFBWSxLQUFLO0FBQ2pELGlCQUFXLFNBQVMsT0FBTyxPQUFPLEtBQUssSUFBSSxVQUFVLFFBQVEsT0FBTztBQUFBLElBQ3RFO0FBR0EsVUFBTSxTQUFTLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixRQUFRLEtBQUssQ0FBQztBQUNsRSxTQUFLLElBQUksVUFBVSxXQUFXLFFBQVE7QUFHdEMsVUFBTSxPQUFPLFNBQVM7QUFDdEIsUUFBSSxnQkFBZ0IsVUFBVTtBQUM1QixXQUFLLGVBQWU7QUFDcEIsV0FBSyxlQUFlO0FBQUEsSUFDdEI7QUFBQSxFQUNGO0FBQ0Y7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiJdCn0K
