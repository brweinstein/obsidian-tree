/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TreeNavigatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// tree-view.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE_TREE = "tree-navigator-view";
var TreeView = class extends import_obsidian.ItemView {
  constructor(leaf, toggleCallback) {
    super(leaf);
    this.toggleCallback = toggleCallback;
    this.nodes = [];
    this.selectedIndex = 0;
    this.expandedMap = /* @__PURE__ */ new Map();
  }
  getViewType() {
    return VIEW_TYPE_TREE;
  }
  getDisplayText() {
    return "Tree Navigator";
  }
  focusContainer() {
    this.containerEl.tabIndex = 0;
    this.containerEl.focus();
  }
  focusFirstItem() {
    const first = this.container.querySelector(".tree-item");
    first?.focus();
  }
  async onOpen() {
    this.container = this.containerEl.children[1];
    this.container.empty();
    await this.buildTree();
    this.render();
    this.registerDomEvent(
      this.containerEl,
      "keydown",
      (e) => {
        if (e.key === "n" && e.altKey) {
          this.toggleCallback();
          e.preventDefault();
          return;
        }
        this.onKey(e);
      }
    );
    this.containerEl.tabIndex = 0;
    this.containerEl.focus();
  }
  async buildTree() {
    this.nodes = [];
    const root = this.app.vault.getRoot();
    const walk = (folder, depth = 0, parent) => {
      const isExpanded = this.expandedMap.get(folder.path) ?? depth === 0;
      const folderNode = { file: folder, depth, expanded: isExpanded, parent };
      this.nodes.push(folderNode);
      if (isExpanded) {
        folder.children.sort((a, b) => {
          if (a instanceof import_obsidian.TFolder && b instanceof import_obsidian.TFile) return -1;
          if (a instanceof import_obsidian.TFile && b instanceof import_obsidian.TFolder) return 1;
          return a.name.localeCompare(b.name);
        }).forEach((child) => {
          if (child instanceof import_obsidian.TFolder) {
            walk(child, depth + 1, folderNode);
          } else {
            this.nodes.push({
              file: child,
              depth: depth + 1,
              expanded: false,
              parent: folderNode
            });
          }
        });
      }
    };
    root.children.sort((a, b) => {
      if (a instanceof import_obsidian.TFolder && b instanceof import_obsidian.TFile) return -1;
      if (a instanceof import_obsidian.TFile && b instanceof import_obsidian.TFolder) return 1;
      return a.name.localeCompare(b.name);
    }).forEach((child) => {
      if (child instanceof import_obsidian.TFolder) {
        walk(child, 0);
      } else {
        this.nodes.push({ file: child, depth: 0, expanded: false });
      }
    });
  }
  render() {
    this.container.empty();
    this.nodes.forEach((node, idx) => {
      const isFolder = node.file instanceof import_obsidian.TFolder;
      const wrapper = this.container.createDiv(`tree-item ${isFolder ? "folder" : "file"} depth-${node.depth}`);
      node.domEl = wrapper;
      if (isFolder) {
        wrapper.toggleClass("expanded", node.expanded);
        wrapper.toggleClass("collapsed", !node.expanded);
        const folderEl = wrapper.createDiv("nav-folder-title");
        folderEl.createSpan({
          cls: "nav-folder-collapse-icon",
          attr: { "aria-hidden": "true" }
        });
        folderEl.createSpan({ cls: "tree-icon mod-folder" });
        folderEl.createDiv({
          cls: "nav-folder-title-content",
          text: node.file.name
        });
      } else {
        const fileEl = wrapper.createDiv("nav-file-title");
        fileEl.createSpan({ cls: "tree-icon mod-document" });
        fileEl.createDiv({
          cls: "nav-file-title-content",
          text: node.file.name
        });
      }
      if (idx === this.selectedIndex) {
        wrapper.addClass("selected-tree-item");
        wrapper.scrollIntoView({ block: "nearest" });
      }
      wrapper.onclick = () => this.selectNode(idx);
    });
  }
  onKey(e) {
    switch (e.key) {
      case "j":
      case "ArrowDown":
        this.moveCursor(1);
        break;
      case "k":
      case "ArrowUp":
        this.moveCursor(-1);
        break;
      case "l":
      case "o":
      case "Enter":
      case "h":
        this.collapseOrExpand();
        break;
      case "a":
        this.createPrompt();
        break;
      case "d":
        this.deletePrompt();
        break;
      case "r":
        this.renamePrompt();
        break;
      case "R":
        this.refresh();
        break;
      default:
        return;
    }
    e.preventDefault();
  }
  selectNode(idx) {
    this.selectedIndex = idx;
    this.render();
  }
  moveCursor(delta) {
    const max = this.nodes.length - 1;
    this.selectedIndex = Math.max(0, Math.min(max, this.selectedIndex + delta));
    this.render();
  }
  collapseRecursively(folder) {
    this.expandedMap.set(folder.path, false);
    folder.children.forEach((child) => {
      if (child instanceof import_obsidian.TFolder) {
        this.collapseRecursively(child);
      }
    });
  }
  async collapseOrExpand() {
    const node = this.nodes[this.selectedIndex];
    if (node.file instanceof import_obsidian.TFolder) {
      const path = node.file.path;
      const isExpanded = this.expandedMap.get(path) ?? false;
      if (isExpanded) {
        this.collapseRecursively(node.file);
      } else {
        this.expandedMap.set(path, true);
      }
      await this.buildTree();
      this.render();
    } else {
      await this.app.workspace.openLinkText(node.file.path, "", false);
    }
  }
  async createPrompt() {
    const node = this.nodes[this.selectedIndex];
    const parentPath = node.file instanceof import_obsidian.TFolder ? node.file.path : node.file.parent?.path ?? "";
    const name = await new TextPromptModal(this.app, "New file/folder name").openAndGetValue();
    if (!name) return;
    if (name.endsWith("/")) {
      await this.app.vault.createFolder(`${parentPath}/${name.slice(0, -1)}`);
    } else {
      const fileName = name.includes(".") ? name : `${name}.md`;
      await this.app.vault.create(`${parentPath}/${fileName}`, "");
    }
    await this.refresh();
  }
  async deletePrompt() {
    const node = this.nodes[this.selectedIndex];
    const confirmed = await new ConfirmationModal(
      this.app,
      `Delete "${node.file.name}"?`
    ).openAndGetValue();
    if (!confirmed) return;
    await this.app.fileManager.trashFile(node.file);
    this.selectedIndex = Math.max(0, this.selectedIndex - 1);
    await this.refresh();
  }
  async renamePrompt() {
    const node = this.nodes[this.selectedIndex];
    const parentPath = node.file.parent?.path ?? "";
    const newName = await new TextPromptModal(
      this.app,
      "Rename to:",
      node.file.name
    ).openAndGetValue();
    if (!newName) return;
    await this.app.vault.rename(node.file, `${parentPath}/${newName}`);
    await this.refresh();
  }
  async refresh() {
    await this.buildTree();
    this.render();
  }
};
var TextPromptModal = class extends import_obsidian.Modal {
  constructor(app, title, initial = "") {
    super(app);
    this.title = title;
    this.initial = initial;
    this.result = "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    const input = contentEl.createEl("input", { type: "text" });
    input.value = this.initial;
    input.addClass("tree-text-input");
    input.focus();
    input.onkeydown = (e) => {
      if (e.key === "Enter") {
        this.result = input.value;
        this.close();
      }
    };
    const submit = contentEl.createEl("button", { text: "OK" });
    submit.onclick = () => {
      this.result = input.value;
      this.close();
    };
  }
  openAndGetValue() {
    return new Promise((resolve) => {
      this.onClose = () => {
        super.onClose();
        resolve(this.result);
      };
      this.open();
    });
  }
};
var ConfirmationModal = class extends import_obsidian.Modal {
  constructor(app, message) {
    super(app);
    this.message = message;
    this.result = false;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.message });
    const yes = contentEl.createEl("button", { text: "Yes" });
    const no = contentEl.createEl("button", { text: "No" });
    yes.onclick = () => {
      this.result = true;
      this.close();
    };
    no.onclick = () => {
      this.result = false;
      this.close();
    };
  }
  openAndGetValue() {
    return new Promise((resolve) => {
      this.onClose = () => {
        super.onClose();
        resolve(this.result);
      };
      this.open();
    });
  }
};

// main.ts
var TreeNavigatorPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.lastLeaf = null;
  }
  onload() {
    this.registerView(
      VIEW_TYPE_TREE,
      (leaf) => new TreeView(leaf, () => this.activateView())
    );
    this.addRibbonIcon(
      "folder",
      "Toggle tree",
      () => this.activateView()
    );
    this.addCommand({
      id: "toggle-tree-navigator",
      name: "Toggle tree",
      callback: () => this.activateView()
    });
  }
  async activateView() {
    const inTree = this.app.workspace.getActiveViewOfType(TreeView);
    if (inTree && this.lastLeaf) {
      this.app.workspace.setActiveLeaf(this.lastLeaf);
      return;
    }
    const mdView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (mdView) {
      const viewType = mdView.getViewType();
      this.lastLeaf = this.app.workspace.getLeavesOfType(viewType).find((l) => l.view === mdView) ?? null;
    }
    let treeLeaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_TREE)[0];
    if (!treeLeaf) {
      const left = this.app.workspace.getLeftLeaf(false);
      treeLeaf = left ?? this.app.workspace.getLeaf("split");
    }
    await treeLeaf.setViewState({ type: VIEW_TYPE_TREE, active: true });
    this.app.workspace.revealLeaf(treeLeaf);
    const view = treeLeaf.view;
    if (view instanceof TreeView) {
      view.focusContainer();
      view.focusFirstItem();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
